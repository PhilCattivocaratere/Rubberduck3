//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rubberduck.Resources.v3 {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class SettingsUI {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SettingsUI() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Rubberduck.Resources.v3.SettingsUI", typeof(SettingsUI).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines how and how often aggregate logs are generated..
        /// </summary>
        public static string AggregatePerformanceLogsSetting_Description {
            get {
                return ResourceManager.GetString("AggregatePerformanceLogsSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aggregate Performance Logs.
        /// </summary>
        public static string AggregatePerformanceLogsSetting_Title {
            get {
                return ResourceManager.GetString("AggregatePerformanceLogsSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, the tooltab will automatically be hidden when the mouse cursor leaves it. Otherwise, the tooltab is &quot;pinned&quot; and remains opened all the time..
        /// </summary>
        public static string AutoHideToolWindowSetting_Description {
            get {
                return ResourceManager.GetString("AutoHideToolWindowSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto Hide.
        /// </summary>
        public static string AutoHideToolWindowSetting_Title {
            get {
                return ResourceManager.GetString("AutoHideToolWindowSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The amount of time between &apos;pings&apos; sent from the server to the client to ensure a client is connected. Determines how long a server process remains dangling without a client before shutting down if something goes wrong..
        /// </summary>
        public static string ClientHealthCheckIntervalSetting_Description {
            get {
                return ResourceManager.GetString("ClientHealthCheckIntervalSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client Healthcheck Interval.
        /// </summary>
        public static string ClientHealthCheckIntervalSetting_Title {
            get {
                return ResourceManager.GetString("ClientHealthCheckIntervalSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration options for folding ranges in the editor, making document lines collapsible in various situations..
        /// </summary>
        public static string CodeFoldingSettings_Description {
            get {
                return ResourceManager.GetString("CodeFoldingSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code Foldings.
        /// </summary>
        public static string CodeFoldingSettings_Title {
            get {
                return ResourceManager.GetString("CodeFoldingSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default docking location for this tooltab..
        /// </summary>
        public static string DefaultToolWindowLocationSetting_Description {
            get {
                return ResourceManager.GetString("DefaultToolWindowLocationSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default Location.
        /// </summary>
        public static string DefaultToolWindowLocationSetting_Title {
            get {
                return ResourceManager.GetString("DefaultToolWindowLocationSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to the default workspace root folder. By default, a new workspace would get created under this location..
        /// </summary>
        public static string DefaultWorkspaceRootSetting_Description {
            get {
                return ResourceManager.GetString("DefaultWorkspaceRootSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default Workspace Root.
        /// </summary>
        public static string DefaultWorkspaceRootSetting_Title {
            get {
                return ResourceManager.GetString("DefaultWorkspaceRootSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lists all the message keys that were opted to &quot;do not show this message again&quot;. Removing items from this list will re-enable the corresponding messages..
        /// </summary>
        public static string DisabledMessageKeysSetting_Description {
            get {
                return ResourceManager.GetString("DisabledMessageKeysSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled Message Keys.
        /// </summary>
        public static string DisabledMessageKeysSetting_Title {
            get {
                return ResourceManager.GetString("DisabledMessageKeysSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, Rubberduck will not check for legacy indenter settings on startup. If you never had the 32-bit legacy Smart Indenter installed, you probably don&apos;t need to care about this..
        /// </summary>
        public static string DisableInitialLegacyIndenterCheckSetting_Description {
            get {
                return ResourceManager.GetString("DisableInitialLegacyIndenterCheckSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable Initial Legacy Indenter Check.
        /// </summary>
        public static string DisableInitialLegacyIndenterCheckSetting_Title {
            get {
                return ResourceManager.GetString("DisableInitialLegacyIndenterCheckSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first run normally uses TRACE level and then turns off logging. This setting determines whether the log level remains at TRACE after a successful initial startup..
        /// </summary>
        public static string DisableInitialLogLevelResetSetting_Description {
            get {
                return ResourceManager.GetString("DisableInitialLogLevelResetSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable Initial Level Reset.
        /// </summary>
        public static string DisableInitialLogLevelResetSetting_Title {
            get {
                return ResourceManager.GetString("DisableInitialLogLevelResetSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This section is all about the Rubberduck Editor..
        /// </summary>
        public static string EditorSettings_Description {
            get {
                return ResourceManager.GetString("EditorSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Editor Settings.
        /// </summary>
        public static string EditorSettings_Title {
            get {
                return ResourceManager.GetString("EditorSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, the Rubberduck Editor process will run a file watcher on opened workspace folders, allowing it to detect changes made to files outside the editor..
        /// </summary>
        public static string EnableFileSystemWatchersSetting_Description {
            get {
                return ResourceManager.GetString("EnableFileSystemWatchersSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable FileWatcher.
        /// </summary>
        public static string EnableFileSystemWatchersSetting_Title {
            get {
                return ResourceManager.GetString("EnableFileSystemWatchersSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In theory there&apos;s nothing wrong with it. In practice, it&apos;s probably better to work off local files though..
        /// </summary>
        public static string EnableUncWorkspacesSetting_Description {
            get {
                return ResourceManager.GetString("EnableUncWorkspacesSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable UNC Workspaces.
        /// </summary>
        public static string EnableUncWorkspacesSetting_Title {
            get {
                return ResourceManager.GetString("EnableUncWorkspacesSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event telemetry provides insight about application events, which is notably useful for identifying how and whether features are discovered..
        /// </summary>
        public static string EventTelemetrySettings_Description {
            get {
                return ResourceManager.GetString("EventTelemetrySettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event Telemetry Settings.
        /// </summary>
        public static string EventTelemetrySettings_Title {
            get {
                return ResourceManager.GetString("EventTelemetrySettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Critical-level exception logs would typically be for unrecoverable showstopper startup exceptions, or &quot;uncaught&quot; (but still loggable) exceptions that end up being rethrown to crash the application because that&apos;s all that&apos;s left to do..
        /// </summary>
        public static string ExceptionTelemetrySettings_Critical_Description {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Critical_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Critical.
        /// </summary>
        public static string ExceptionTelemetrySettings_Critical_Title {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Critical_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug-level exceptions might be exceptions developers would probably be interested in..
        /// </summary>
        public static string ExceptionTelemetrySettings_Debug_Description {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Debug_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string ExceptionTelemetrySettings_Debug_Title {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Debug_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception telemetry provides information about errors and their context, which can be useful for identifying bugs and problems..
        /// </summary>
        public static string ExceptionTelemetrySettings_Description {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exceptions would normally be logged at this level..
        /// </summary>
        public static string ExceptionTelemetrySettings_Error_Description {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Error_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error.
        /// </summary>
        public static string ExceptionTelemetrySettings_Error_Title {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Error_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information-level exceptions would also be for routine unexceptional exceptions, which makes no sense..
        /// </summary>
        public static string ExceptionTelemetrySettings_Information_Description {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Information_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information.
        /// </summary>
        public static string ExceptionTelemetrySettings_Information_Title {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Information_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception Telemetry Settings.
        /// </summary>
        public static string ExceptionTelemetrySettings_Title {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trace-level exception logs would be for unexceptional exceptions, which... hopefully doesn&apos;t happen..
        /// </summary>
        public static string ExceptionTelemetrySettings_Trace_Description {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Trace_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trace.
        /// </summary>
        public static string ExceptionTelemetrySettings_Trace_Title {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Trace_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning-level exceptions might be logging suppressed exceptions, validation errors or otherwise inconsistent state, which may or may not precede an error-level exception log..
        /// </summary>
        public static string ExceptionTelemetrySettings_Warning_Description {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Warning_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning.
        /// </summary>
        public static string ExceptionTelemetrySettings_Warning_Title {
            get {
                return ResourceManager.GetString("ExceptionTelemetrySettings.Warning_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The duration of the delay afforded to the language server between &apos;shutdown&apos; and &apos;exit&apos; notifications..
        /// </summary>
        public static string ExitNotificationDelaySetting_Description {
            get {
                return ResourceManager.GetString("ExitNotificationDelaySetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exit Notification Delay.
        /// </summary>
        public static string ExitNotificationDelaySetting_Title {
            get {
                return ResourceManager.GetString("ExitNotificationDelaySetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether theming should extend to the window chrome and take over the rendering of windows&apos; caption bar and minimize/restore/maximize buttons..
        /// </summary>
        public static string ExtendWindowChromeSetting_Description {
            get {
                return ResourceManager.GetString("ExtendWindowChromeSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extend Window Chrome.
        /// </summary>
        public static string ExtendWindowChromeSetting_Title {
            get {
                return ResourceManager.GetString("ExtendWindowChromeSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether folding ranges should be created for block statements, e.g. If...End If, Do...Loop, With...End With, etc..
        /// </summary>
        public static string FoldBlockStatementsSetting_Description {
            get {
                return ResourceManager.GetString("FoldBlockStatementsSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fold block statements.
        /// </summary>
        public static string FoldBlockStatementsSetting_Title {
            get {
                return ResourceManager.GetString("FoldBlockStatementsSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether folding ranges should be created to make module attributes a collapsible section at the top of a module..
        /// </summary>
        public static string FoldModuleAttributesSetting_Description {
            get {
                return ResourceManager.GetString("FoldModuleAttributesSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fold module attributes.
        /// </summary>
        public static string FoldModuleAttributesSetting_Title {
            get {
                return ResourceManager.GetString("FoldModuleAttributesSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, creates a folding range encompassing the entire declarations section of a module..
        /// </summary>
        public static string FoldModuleDeclarationsSetting_Description {
            get {
                return ResourceManager.GetString("FoldModuleDeclarationsSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fold module declarations.
        /// </summary>
        public static string FoldModuleDeclarationsSetting_Title {
            get {
                return ResourceManager.GetString("FoldModuleDeclarationsSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, creates a folding range to hide the header section of a module..
        /// </summary>
        public static string FoldModuleHeaderSetting_Description {
            get {
                return ResourceManager.GetString("FoldModuleHeaderSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fold module header.
        /// </summary>
        public static string FoldModuleHeaderSetting_Title {
            get {
                return ResourceManager.GetString("FoldModuleHeaderSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, custom folding ranges can be created using @Region/@EndRegion annotation comments..
        /// </summary>
        public static string FoldRegionsSetting_Description {
            get {
                return ResourceManager.GetString("FoldRegionsSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fold regions.
        /// </summary>
        public static string FoldRegionsSetting_Title {
            get {
                return ResourceManager.GetString("FoldRegionsSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether folding ranges should be created for scopes, e.g. Sub, Function, Property members of a module..
        /// </summary>
        public static string FoldScopesSetting_Description {
            get {
                return ResourceManager.GetString("FoldScopesSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fold scopes.
        /// </summary>
        public static string FoldScopesSetting_Title {
            get {
                return ResourceManager.GetString("FoldScopesSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not just everything we couldn&apos;t neatly categorize elsewhere: general settings generally apply to the entire application..
        /// </summary>
        public static string GeneralSettings_Description {
            get {
                return ResourceManager.GetString("GeneralSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General Settings.
        /// </summary>
        public static string GeneralSettings_Title {
            get {
                return ResourceManager.GetString("GeneralSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, the update server considers pre-release builds when evaluating if a newer version is available..
        /// </summary>
        public static string IncludePreReleasesSetting_Description {
            get {
                return ResourceManager.GetString("IncludePreReleasesSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Include pre-releases.
        /// </summary>
        public static string IncludePreReleasesSetting_Title {
            get {
                return ResourceManager.GetString("IncludePreReleasesSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether telemetry is enabled at all. Disabled by default, making telemetry explicitly opt-in..
        /// </summary>
        public static string IsTelemetryEnabledSetting_Description {
            get {
                return ResourceManager.GetString("IsTelemetryEnabledSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable telemetry.
        /// </summary>
        public static string IsTelemetryEnabledSetting_Title {
            get {
                return ResourceManager.GetString("IsTelemetryEnabledSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether the update server is allowed to run as a background process..
        /// </summary>
        public static string IsUpdateServerEnabledSetting_Description {
            get {
                return ResourceManager.GetString("IsUpdateServerEnabledSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable Update Server.
        /// </summary>
        public static string IsUpdateServerEnabledSetting_Title {
            get {
                return ResourceManager.GetString("IsUpdateServerEnabledSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These settings control the behavior of the language server client in the Rubberduck Editor..
        /// </summary>
        public static string LanguageClientSettings_Description {
            get {
                return ResourceManager.GetString("LanguageClientSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LSP Client.
        /// </summary>
        public static string LanguageClientSettings_Title {
            get {
                return ResourceManager.GetString("LanguageClientSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For a normal install these should never need to be changed. Proceed carefully!.
        /// </summary>
        public static string LanguageClientStartupSettings_Description {
            get {
                return ResourceManager.GetString("LanguageClientStartupSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Startup Settings.
        /// </summary>
        public static string LanguageClientStartupSettings_Title {
            get {
                return ResourceManager.GetString("LanguageClientStartupSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration specific to the language server application..
        /// </summary>
        public static string LanguageServerSettings_Description {
            get {
                return ResourceManager.GetString("LanguageServerSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language Server Settings.
        /// </summary>
        public static string LanguageServerSettings_Title {
            get {
                return ResourceManager.GetString("LanguageServerSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For a normal install these should never need to be changed. Proceed carefully!.
        /// </summary>
        public static string LanguageServerStartupSettings_Description {
            get {
                return ResourceManager.GetString("LanguageServerStartupSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Startup Settings.
        /// </summary>
        public static string LanguageServerStartupSettings_Title {
            get {
                return ResourceManager.GetString("LanguageServerStartupSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines the set of localized resources to use in the UI..
        /// </summary>
        public static string LocaleSetting_Description {
            get {
                return ResourceManager.GetString("LocaleSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locale.
        /// </summary>
        public static string LocaleSetting_Title {
            get {
                return ResourceManager.GetString("LocaleSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether and how Rubberduck generates log files..
        /// </summary>
        public static string LoggingSettings_Description {
            get {
                return ResourceManager.GetString("LoggingSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logging.
        /// </summary>
        public static string LoggingSettings_Title {
            get {
                return ResourceManager.GetString("LoggingSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum level a message must be logged at, in order to be actually written..
        /// </summary>
        public static string LogLevelSetting_Description {
            get {
                return ResourceManager.GetString("LogLevelSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Level.
        /// </summary>
        public static string LogLevelSetting_Title {
            get {
                return ResourceManager.GetString("LogLevelSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of messages rendered in the window. New incoming messages remove older messages once the limit is reached..
        /// </summary>
        public static string MaximumMessagesSetting_Description {
            get {
                return ResourceManager.GetString("MaximumMessagesSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum Messages.
        /// </summary>
        public static string MaximumMessagesSetting_Title {
            get {
                return ResourceManager.GetString("MaximumMessagesSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metric telemetry collects and aggregates various metrics, including performance and counters..
        /// </summary>
        public static string MetricTelemetrySettings_Description {
            get {
                return ResourceManager.GetString("MetricTelemetrySettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metric Telemetry Settings.
        /// </summary>
        public static string MetricTelemetrySettings_Title {
            get {
                return ResourceManager.GetString("MetricTelemetrySettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, the Rubberduck Editor cannot be executed standalone, it must be started from within the VBIDE by the Rubberduck add-in..
        /// </summary>
        public static string RequireAddInHostSetting_Description {
            get {
                return ResourceManager.GetString("RequireAddInHostSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Require AddIn Host.
        /// </summary>
        public static string RequireAddInHostSetting_Title {
            get {
                return ResourceManager.GetString("RequireAddInHostSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, creating a new workspace/project requires saving the host document under the default workspace root folder..
        /// </summary>
        public static string RequireDefaultWorkspaceRootHostSetting_Description {
            get {
                return ResourceManager.GetString("RequireDefaultWorkspaceRootHostSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Require Host in Default Workspace Root.
        /// </summary>
        public static string RequireDefaultWorkspaceRootHostSetting_Title {
            get {
                return ResourceManager.GetString("RequireDefaultWorkspaceRootHostSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, creating a new workspace/project from an existing host document requires first saving that host document..
        /// </summary>
        public static string RequireSavedHostSetting_Description {
            get {
                return ResourceManager.GetString("RequireSavedHostSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Require Saved Host.
        /// </summary>
        public static string RequireSavedHostSetting_Title {
            get {
                return ResourceManager.GetString("RequireSavedHostSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The top-level settings group that encompasses all other Rubberduck settings..
        /// </summary>
        public static string RubberduckSettings_Description {
            get {
                return ResourceManager.GetString("RubberduckSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rubberduck Settings.
        /// </summary>
        public static string RubberduckSettings_Title {
            get {
                return ResourceManager.GetString("RubberduckSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows all settings across all setting groups that have a match for the search term in either their name or description..
        /// </summary>
        public static string SearchResults_Description {
            get {
                return ResourceManager.GetString("SearchResults_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search Results.
        /// </summary>
        public static string SearchResults_Title {
            get {
                return ResourceManager.GetString("SearchResults_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, the telemetry server is allowed to transmit event data..
        /// </summary>
        public static string SendEventTelemetrySetting_Description {
            get {
                return ResourceManager.GetString("SendEventTelemetrySetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send &apos;Event&apos; telemetry.
        /// </summary>
        public static string SendEventTelemetrySetting_Title {
            get {
                return ResourceManager.GetString("SendEventTelemetrySetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled (recommended), the telemetry server is allowed to transmit exception (error) details..
        /// </summary>
        public static string SendExceptionTelemetrySetting_Description {
            get {
                return ResourceManager.GetString("SendExceptionTelemetrySetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send &apos;Exception&apos; telemetry.
        /// </summary>
        public static string SendExceptionTelemetrySetting_Title {
            get {
                return ResourceManager.GetString("SendExceptionTelemetrySetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows the telemetry server to transmit various aggregated metrics..
        /// </summary>
        public static string SendMetricTelemetrySetting_Description {
            get {
                return ResourceManager.GetString("SendMetricTelemetrySetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send &apos;Metric&apos; telemetry.
        /// </summary>
        public static string SendMetricTelemetrySetting_Title {
            get {
                return ResourceManager.GetString("SendMetricTelemetrySetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, the telemetry server is allowed to transmit trace logs..
        /// </summary>
        public static string SendTraceTelemetrySetting_Description {
            get {
                return ResourceManager.GetString("SendTraceTelemetrySetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send &apos;Trace&apos; telemetry.
        /// </summary>
        public static string SendTraceTelemetrySetting_Title {
            get {
                return ResourceManager.GetString("SendTraceTelemetrySetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The location of the server executable..
        /// </summary>
        public static string ServerExecutablePathSetting_Description {
            get {
                return ResourceManager.GetString("ServerExecutablePathSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location.
        /// </summary>
        public static string ServerExecutablePathSetting_Title {
            get {
                return ResourceManager.GetString("ServerExecutablePathSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines the type of messages transmitted between the client and a server..
        /// </summary>
        public static string ServerMessageModeSetting_Description {
            get {
                return ResourceManager.GetString("ServerMessageModeSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message Mode.
        /// </summary>
        public static string ServerMessageModeSetting_Title {
            get {
                return ResourceManager.GetString("ServerMessageModeSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using named pipes for transport, determines the name of that pipe..
        /// </summary>
        public static string ServerPipeNameSetting_Description {
            get {
                return ResourceManager.GetString("ServerPipeNameSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pipe Name.
        /// </summary>
        public static string ServerPipeNameSetting_Title {
            get {
                return ResourceManager.GetString("ServerPipeNameSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings used by the Language Server Trace tooltab..
        /// </summary>
        public static string ServerTraceSettings_Description {
            get {
                return ResourceManager.GetString("ServerTraceSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server Trace.
        /// </summary>
        public static string ServerTraceSettings_Title {
            get {
                return ResourceManager.GetString("ServerTraceSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines the type of transport for the LSP/JsonRPC messages..
        /// </summary>
        public static string ServerTransportTypeSetting_Description {
            get {
                return ResourceManager.GetString("ServerTransportTypeSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transport Type.
        /// </summary>
        public static string ServerTransportTypeSetting_Title {
            get {
                return ResourceManager.GetString("ServerTransportTypeSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings were updated successfully..
        /// </summary>
        public static string SettingsSaved_Message {
            get {
                return ResourceManager.GetString("SettingsSaved_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings Saved.
        /// </summary>
        public static string SettingsSaved_Title {
            get {
                return ResourceManager.GetString("SettingsSaved_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether the Rubberduck Editor application should display a title &quot;splash&quot; screen on startup, during the split-second it initializes..
        /// </summary>
        public static string ShowSplashSetting_Description {
            get {
                return ResourceManager.GetString("ShowSplashSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show Splash.
        /// </summary>
        public static string ShowSplashSetting_Title {
            get {
                return ResourceManager.GetString("ShowSplashSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable this option to open this tooltab on startup..
        /// </summary>
        public static string ShowToolWindowOnStartupSetting_Description {
            get {
                return ResourceManager.GetString("ShowToolWindowOnStartupSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show tooltab on startup.
        /// </summary>
        public static string ShowToolWindowOnStartupSetting_Title {
            get {
                return ResourceManager.GetString("ShowToolWindowOnStartupSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, the editor will automatically load and open a &quot;welcome&quot; document on startup. This document contains release notes and other information about the current version..
        /// </summary>
        public static string ShowWelcomeTabSetting_Description {
            get {
                return ResourceManager.GetString("ShowWelcomeTabSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show &apos;Welcome&apos; Tab.
        /// </summary>
        public static string ShowWelcomeTabSetting_Title {
            get {
                return ResourceManager.GetString("ShowWelcomeTabSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether opening a workspace/project should automatically open the Workspace Explorer, regardless of whether it is visible at startup or not..
        /// </summary>
        public static string ShowWorkspaceExplorerOnProjectOpenSetting_Description {
            get {
                return ResourceManager.GetString("ShowWorkspaceExplorerOnProjectOpenSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show Workspace Explorer on Project Open.
        /// </summary>
        public static string ShowWorkspaceExplorerOnProjectOpenSetting_Title {
            get {
                return ResourceManager.GetString("ShowWorkspaceExplorerOnProjectOpenSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether telemetry data is transmitted automatically in periodic batches. If disabled, telemetry data must be manually transmitted..
        /// </summary>
        public static string StreamTransmissionSetting_Description {
            get {
                return ResourceManager.GetString("StreamTransmissionSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream transmission.
        /// </summary>
        public static string StreamTransmissionSetting_Title {
            get {
                return ResourceManager.GetString("StreamTransmissionSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of telemetry events transmitted in a payload..
        /// </summary>
        public static string TelemetryEventQueueSizeSetting_Description {
            get {
                return ResourceManager.GetString("TelemetryEventQueueSizeSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event queue size.
        /// </summary>
        public static string TelemetryEventQueueSizeSetting_Title {
            get {
                return ResourceManager.GetString("TelemetryEventQueueSizeSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regroups telemetry settings and configuration specific to the telemetry server application..
        /// </summary>
        public static string TelemetryServerSettings_Description {
            get {
                return ResourceManager.GetString("TelemetryServerSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Telemetry Server Settings.
        /// </summary>
        public static string TelemetryServerSettings_Title {
            get {
                return ResourceManager.GetString("TelemetryServerSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For a normal install these should never need to be changed. Proceed carefully!.
        /// </summary>
        public static string TelemetryServerStartupSettings_Description {
            get {
                return ResourceManager.GetString("TelemetryServerStartupSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Startup Settings.
        /// </summary>
        public static string TelemetryServerStartupSettings_Title {
            get {
                return ResourceManager.GetString("TelemetryServerStartupSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The folder location where the Rubberduck Editor expects to find project templates. This would normally be a &apos;Templates&apos; folder under the Rubberduck installation directory..
        /// </summary>
        public static string TemplatesLocationSetting_Description {
            get {
                return ResourceManager.GetString("TemplatesLocationSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Templates Location.
        /// </summary>
        public static string TemplatesLocationSetting_Title {
            get {
                return ResourceManager.GetString("TemplatesLocationSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings specific to each tooltab.
        /// </summary>
        public static string ToolsSettings_Description {
            get {
                return ResourceManager.GetString("ToolsSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tools.
        /// </summary>
        public static string ToolsSettings_Title {
            get {
                return ResourceManager.GetString("ToolsSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log level to use for startup activities..
        /// </summary>
        public static string TraceLevelSetting_Description {
            get {
                return ResourceManager.GetString("TraceLevelSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trace Level.
        /// </summary>
        public static string TraceLevelSetting_Title {
            get {
                return ResourceManager.GetString("TraceLevelSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trace telemetry collects trace logs that can be used for troubleshooting..
        /// </summary>
        public static string TraceTelemetrySettings_Description {
            get {
                return ResourceManager.GetString("TraceTelemetrySettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trace Telemetry Settings.
        /// </summary>
        public static string TraceTelemetrySettings_Title {
            get {
                return ResourceManager.GetString("TraceTelemetrySettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration for the update server / Rubberduck Installer app..
        /// </summary>
        public static string UpdateServerSettings_Description {
            get {
                return ResourceManager.GetString("UpdateServerSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update Server Settings.
        /// </summary>
        public static string UpdateServerSettings_Title {
            get {
                return ResourceManager.GetString("UpdateServerSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For a normal install these should never need to be changed. Proceed carefully!.
        /// </summary>
        public static string UpdateServerStartupSettings_Description {
            get {
                return ResourceManager.GetString("UpdateServerStartupSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Startup Settings.
        /// </summary>
        public static string UpdateServerStartupSettings_Title {
            get {
                return ResourceManager.GetString("UpdateServerStartupSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to URL pointing to the Rubberduck3 web API. Probably doesn&apos;t need to change... unless you&apos;re trying to hit a dev or test version of the API..
        /// </summary>
        public static string WebApiBaseUrlSetting_Description {
            get {
                return ResourceManager.GetString("WebApiBaseUrlSetting_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WebApi URL.
        /// </summary>
        public static string WebApiBaseUrlSetting_Title {
            get {
                return ResourceManager.GetString("WebApiBaseUrlSetting_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings used by the Workspace Explorer tooltab..
        /// </summary>
        public static string WorkspaceExplorerSettings_Description {
            get {
                return ResourceManager.GetString("WorkspaceExplorerSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workspace Explorer.
        /// </summary>
        public static string WorkspaceExplorerSettings_Title {
            get {
                return ResourceManager.GetString("WorkspaceExplorerSettings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings relative to workspaces/projects..
        /// </summary>
        public static string WorkspaceSettings_Description {
            get {
                return ResourceManager.GetString("WorkspaceSettings_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workspace Settings.
        /// </summary>
        public static string WorkspaceSettings_Title {
            get {
                return ResourceManager.GetString("WorkspaceSettings_Title", resourceCulture);
            }
        }
    }
}
